stages:
  - Build Images
  - Push Images

variables:
  BUILD_IMAGE_REPO: "stabletec-lpfs:5000/stabletec/build-foe"
  PUSH_IMAGE_REPO: "docker.io/stabletec/build-foe"
  USE_LAYERS: "--layers"

.linux_build_template: &linux_build_template
  stage: Build Images
  tags:
    - container-builder
    - linux
    - podman
    - ${ARCH}
  script:
    - export IMAGE_TAG=$(basename -- $DOCKERFILE)
    - export IMAGE_TAG=${IMAGE_TAG%.*}
    - export BUILDAH_LAYERS=false
    - podman build
        --pull $USE_LAYERS $NO_CACHE
        --cache-from $BUILD_IMAGE_REPO
        --cache-to $BUILD_IMAGE_REPO
        --platform linux/$ARCH
        --tag $BUILD_IMAGE_REPO:$IMAGE_TAG-$ARCH
        --file $DOCKERFILE
        .
    - podman push $BUILD_IMAGE_REPO:$IMAGE_TAG-$ARCH
    - podman rmi $BUILD_IMAGE_REPO:$IMAGE_TAG-$ARCH

.windows_build_template: &windows_build_template
  stage: Build Images
  tags:
    - container-builder
    - windows
    - docker
    - ${ARCH}
    - ${WINDOWS_CONTAINER_BASE_VERSION}
  script:
    - $env:IMAGE_TAG=$(Get-Item $DOCKERFILE).BaseName
    - docker build
        --isolation=process
        --pull $env:NO_CACHE
        --platform windows/$ARCH
        --tag ${env:BUILD_IMAGE_REPO}:${env:IMAGE_TAG}-$ARCH
        --file $DOCKERFILE
        .
    - docker push ${env:BUILD_IMAGE_REPO}:$env:IMAGE_TAG-$ARCH
    # @TODO - Remove images when remote cache working
    #- docker rmi ${env:BUILD_IMAGE_REPO}:$env:IMAGE_TAG-$ARCH

Arch Build:
  parallel:
    matrix:
    - ARCH: [amd64]
      DOCKERFILE: [arch/arch.Dockerfile]
  <<: *linux_build_template

Debian Build:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, s390x, riscv64]
      DOCKERFILE: [debian/debian.Dockerfile]
  <<: *linux_build_template

Fedora Build:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, s390x]
      DOCKERFILE: [fedora/fedora.Dockerfile]
  <<: *linux_build_template

openSUSE Build:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
      DOCKERFILE: [opensuse/opensuse.Dockerfile]
  <<: *linux_build_template

Ubuntu Build:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, s390x, riscv64]
      DOCKERFILE: [ubuntu/ubuntu.Dockerfile]
  <<: *linux_build_template

Windows Build:
  parallel:
    matrix:
    - ARCH: [amd64]
      DOCKERFILE: [windows-ltsc2022/windows-ltsc2022-vs2019.Dockerfile, windows-ltsc2022/windows-ltsc2022-vs2022.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2022]
    - ARCH: [amd64]
      DOCKERFILE: [windows-ltsc2025/windows-ltsc2025-vs2019.Dockerfile, windows-ltsc2025/windows-ltsc2025-vs2022.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2025]
  <<: *windows_build_template

MSYS Build:
  parallel:
    matrix:
    - ARCH: [amd64]
      DOCKERFILE: [msys-ltsc2022/msys-ltsc2022-clang64.Dockerfile, msys-ltsc2022/msys-ltsc2022-mingw64.Dockerfile, msys-ltsc2022/msys-ltsc2022-ucrt64.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2022]
    - ARCH: [amd64]
      DOCKERFILE: [msys-ltsc2025/msys-ltsc2025-clang64.Dockerfile, msys-ltsc2025/msys-ltsc2025-mingw64.Dockerfile, msys-ltsc2025/msys-ltsc2025-ucrt64.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2025]
  <<: *windows_build_template

# Push Images

.push_template: &push_template
  stage: Push Images
  only:
    refs:
      - main
  tags:
    - container-builder
    - linux
    - podman
  script:
    - export IMAGE_TAG=$(basename -- $DOCKERFILE)
    - export IMAGE_TAG=${IMAGE_TAG%.*}
    - if podman manifest exists $BUILD_IMAGE_REPO:$IMAGE_TAG; then
        echo "podman manifest rm $BUILD_IMAGE_REPO:$IMAGE_TAG" ;
        podman manifest rm $BUILD_IMAGE_REPO:$IMAGE_TAG ;
      fi
    - podman manifest create $BUILD_IMAGE_REPO:$IMAGE_TAG
    - for ARCH in $ARCHITECTURES; do
        echo "podman manifest add $BUILD_IMAGE_REPO:$IMAGE_TAG $BUILD_IMAGE_REPO:$IMAGE_TAG-$ARCH" ;
        podman manifest add $BUILD_IMAGE_REPO:$IMAGE_TAG $BUILD_IMAGE_REPO:$IMAGE_TAG-$ARCH ;
      done
    # push default tag
    - podman manifest push --all -f v2s2 $BUILD_IMAGE_REPO:$IMAGE_TAG $PUSH_IMAGE_REPO:$IMAGE_TAG
    # push alternate tags
    - |
      set +e
      TAGS=$(grep -e "^# ALTERNATE_TAGS: " $DOCKERFILE | head -n 1)
      TAGS=${TAGS:17} 
      for TAG in $TAGS; do
        echo "podman manifest push --all -f v2s2 $BUILD_IMAGE_REPO:$IMAGE_TAG $PUSH_IMAGE_REPO:$TAG" ;
        podman manifest push --all -f v2s2 $BUILD_IMAGE_REPO:$IMAGE_TAG $PUSH_IMAGE_REPO:$TAG ;
      done
    - podman manifest rm $BUILD_IMAGE_REPO:$IMAGE_TAG

Arch Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64"
      DOCKERFILE: [arch/arch.Dockerfile]
  <<: *push_template

Debian Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64 arm64 ppc64le s390x riscv64"
      DOCKERFILE: [debian/debian.Dockerfile]
  <<: *push_template

Fedora Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64 arm64 ppc64le s390x"
      DOCKERFILE: [fedora/fedora.Dockerfile]
  <<: *push_template

openSUSE Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64 arm64 ppc64le"
      DOCKERFILE: [opensuse/opensuse.Dockerfile]
  <<: *push_template

Ubuntu Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64 arm64 ppc64le s390x riscv64"
      DOCKERFILE: [ubuntu/ubuntu.Dockerfile]
  <<: *push_template

Windows Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64"
      DOCKERFILE: [windows-ltsc2022/windows-ltsc2022-vs2019.Dockerfile, windows-ltsc2022/windows-ltsc2022-vs2022.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2022]
    - ARCHITECTURES: "amd64"
      DOCKERFILE: [windows-ltsc2025/windows-ltsc2025-vs2019.Dockerfile, windows-ltsc2025/windows-ltsc2025-vs2022.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2025]
  <<: *push_template

MSYS Push:
  parallel:
    matrix:
    - ARCHITECTURES: "amd64"
      DOCKERFILE: [msys-ltsc2022/msys-ltsc2022-clang64.Dockerfile, msys-ltsc2022/msys-ltsc2022-mingw64.Dockerfile, msys-ltsc2022/msys-ltsc2022-ucrt64.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2022]
    - ARCHITECTURES: "amd64"
      DOCKERFILE: [msys-ltsc2025/msys-ltsc2025-clang64.Dockerfile, msys-ltsc2025/msys-ltsc2025-mingw64.Dockerfile, msys-ltsc2025/msys-ltsc2025-ucrt64.Dockerfile]
      WINDOWS_CONTAINER_BASE_VERSION: [ltsc2025]
  <<: *push_template
